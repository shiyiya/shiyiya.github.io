<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>佚名</title>
  <icon>http://shiyiya.github.io/icon.png</icon>
  
  <link href="http://shiyiya.github.io/atom.xml" rel="self"/>
  
  <link href="http://shiyiya.github.io/"/>
  <updated>2023-09-09T04:42:02.052Z</updated>
  <id>http://shiyiya.github.io/</id>
  
  <author>
    <name>shiyi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>为什么我的 React 组件重新渲染(re-render)了</title>
    <link href="http://shiyiya.github.io/archives/why-did-my-react-component-rerender/"/>
    <id>http://shiyiya.github.io/archives/why-did-my-react-component-rerender/</id>
    <published>2023-06-08T16:00:00.000Z</published>
    <updated>2023-09-09T04:42:02.052Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2&gt;render or re-render&lt;/h2&gt;&lt;p&gt;渲染分为首次渲染(render)和更新(re-render); 首次渲染是不可避免的, 当组件的 props,state 或者 context 等依赖发生改变时则会触发当前组件和子组件的重新渲染,</summary>
        
      
    
    
    
    
    <category term="react" scheme="http://shiyiya.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Vue3 中的依赖收集 (reactive)</title>
    <link href="http://shiyiya.github.io/archives/reactivity-in-vue3/"/>
    <id>http://shiyiya.github.io/archives/reactivity-in-vue3/</id>
    <published>2021-07-04T16:00:00.000Z</published>
    <updated>2023-09-09T04:42:02.052Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;依赖收集：通过自然地使用变量，来完成依赖的收集，当变量改变时，根据收集的依赖判断是否需要触发回调。&lt;/p&gt;
&lt;p&gt;举个栗子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;js&quot;&gt;const state = reactive(&amp;#123; count: 1</summary>
        
      
    
    
    
    
    <category term="reactivity" scheme="http://shiyiya.github.io/tags/reactivity/"/>
    
    <category term="vue3" scheme="http://shiyiya.github.io/tags/vue3/"/>
    
  </entry>
  
  <entry>
    <title>EventBus 应用及简易实现</title>
    <link href="http://shiyiya.github.io/archives/eventbus-introduction/"/>
    <id>http://shiyiya.github.io/archives/eventbus-introduction/</id>
    <published>2021-06-30T03:00:58.000Z</published>
    <updated>2023-09-09T04:42:02.052Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;eventbus：使用发布订阅模式，多用于跨组件跨页面通信，即将一些个互不相干的远房亲戚建立通信。并不需要改动过多的代码，只需在需要的时候注册监听即可，大大降低代码耦合。&lt;/p&gt;
&lt;h2&gt;eventbus</summary>
        
      
    
    
    
    
    <category term="eventbus" scheme="http://shiyiya.github.io/tags/eventbus/"/>
    
  </entry>
  
  <entry>
    <title>promise</title>
    <link href="http://shiyiya.github.io/archives/undefined/"/>
    <id>http://shiyiya.github.io/archives/undefined/</id>
    <published>2019-05-29T16:00:00.000Z</published>
    <updated>2023-09-09T04:42:02.052Z</updated>
    
    
    <summary type="html">&lt;p&gt;todo&lt;/p&gt;</summary>
    
    
    
    
    <category term="promise" scheme="http://shiyiya.github.io/tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>初探 Progressive Web App</title>
    <link href="http://shiyiya.github.io/archives/pwa-introduction/"/>
    <id>http://shiyiya.github.io/archives/pwa-introduction/</id>
    <published>2019-05-17T16:00:00.000Z</published>
    <updated>2023-09-09T04:42:02.052Z</updated>
    
    
    <summary type="html">&lt;h2&gt;它是什么 ？&lt;/h2&gt;&lt;p&gt;Progressive Web App, 简称 PWA，是提升 Web App 的体验的一种新方法，能给用户（类）原生应用的体验。&lt;/p&gt;
&lt;p&gt;PWA 的主要特点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可靠 - 即使在不稳定的网络环境下，也能瞬间加载并展现&lt;/li&gt;
&lt;li&gt;体验 - 快速响应，并且有平滑的动画响应用户的操作&lt;/li&gt;
&lt;li&gt;粘性 - 像设备上的原生应用，具有沉浸式的用户体验，用户可以添加到桌面&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="pwa" scheme="http://shiyiya.github.io/tags/pwa/"/>
    
  </entry>
  
  <entry>
    <title>Implementation simple react Redux</title>
    <link href="http://shiyiya.github.io/archives/implementation-simple-react-Redux/"/>
    <id>http://shiyiya.github.io/archives/implementation-simple-react-Redux/</id>
    <published>2019-03-12T06:42:00.000Z</published>
    <updated>2023-09-09T04:42:02.052Z</updated>
    
    
    <summary type="html">&lt;h2&gt;前言&lt;/h2&gt;&lt;p&gt;在 React 组件中，大部分组件或多或少都会需要一下 &lt;code&gt;状态&lt;/code&gt;, 来维持 &amp;amp; 切换自身的 UI 状态, 他可能是自身的 State, 也许是外部传递的 Props, 都可以作为自身 UI 的一个切换的控制开关。&lt;/p&gt;
&lt;p&gt;整个数据流都是从上至下的单项数据流（State -&amp;gt; Props),&lt;/p&gt;</summary>
    
    
    
    
    <category term="redux" scheme="http://shiyiya.github.io/tags/redux/"/>
    
    <category term="react" scheme="http://shiyiya.github.io/tags/react/"/>
    
    <category term="react-redux" scheme="http://shiyiya.github.io/tags/react-redux/"/>
    
  </entry>
  
  <entry>
    <title>Classical inheritance in JavaScript ES5</title>
    <link href="http://shiyiya.github.io/archives/classical-inheritance-in-JavaScript-ES5/"/>
    <id>http://shiyiya.github.io/archives/classical-inheritance-in-JavaScript-ES5/</id>
    <published>2018-12-24T16:00:00.000Z</published>
    <updated>2023-09-09T04:42:02.052Z</updated>
    
    
    <summary type="html">&lt;p&gt;在 JavaScript 中，最让人困扰的几根莫过于 this、闭包、作用域、原型链，而却常常看又常常忘，最近又看了一下高程感觉清晰了很多，于是就想写在这里（水一篇文章）。&lt;/p&gt;</summary>
    
    
    
    
    <category term="es5-extends" scheme="http://shiyiya.github.io/tags/es5-extends/"/>
    
  </entry>
  
  <entry>
    <title>how-to-set-correctly-font-family</title>
    <link href="http://shiyiya.github.io/archives/how-to-set-correctly-font-family/"/>
    <id>http://shiyiya.github.io/archives/how-to-set-correctly-font-family/</id>
    <published>2018-09-26T16:00:00.000Z</published>
    <updated>2023-09-09T04:42:02.052Z</updated>
    
    
    <summary type="html">&lt;p&gt;在不同操作系统、不同游览器里面默认显示的字体是不一样的，为了保持各个平台渲染效果保持一致或者使得显示效果更好，我们就需要设置好 font-family。&lt;/p&gt;
&lt;p&gt;根据 font-family 的原则,假如客户终端不认识前面的字体,就自动切换到第二种字体,第二种不认识就切换到第三种,以此类推.假如都不能识别就调用默认字体 。&lt;br&gt;每个人的审美都不一样，所钟爱的字体可能也有所不同，这里是本站所使用的 font-family：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;body &amp;#123;
  font-family:
    /* 1 */ -apple-system, BlinkMacSystemFont, /* 2 */ &amp;#39;PingFang SC&amp;#39;, Arial, &amp;#39;Microsoft YaHei&amp;#39;,
    /* 3 */ Lato, sans-serif;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    
    <category term="web-font-family" scheme="http://shiyiya.github.io/tags/web-font-family/"/>
    
  </entry>
  
  <entry>
    <title>我的 Webpack（4）升级指南</title>
    <link href="http://shiyiya.github.io/archives/migration-guide-for-webpck4/"/>
    <id>http://shiyiya.github.io/archives/migration-guide-for-webpck4/</id>
    <published>2018-09-19T16:00:00.000Z</published>
    <updated>2023-09-09T04:42:02.052Z</updated>
    
    
    <summary type="html">&lt;p&gt;全新的 webpack（4）来了，带来了全新的特性，更快的性能，更少的配置，先来升级踩波坑吧！&lt;/p&gt;</summary>
    
    
    
    
    <category term="webpck4" scheme="http://shiyiya.github.io/tags/webpck4/"/>
    
  </entry>
  
  <entry>
    <title>Do something interesting with JS</title>
    <link href="http://shiyiya.github.io/archives/do-something-interesting-with-JS/"/>
    <id>http://shiyiya.github.io/archives/do-something-interesting-with-JS/</id>
    <published>2018-06-30T02:51:10.000Z</published>
    <updated>2023-09-09T04:42:02.052Z</updated>
    
    
    <summary type="html">&lt;h2&gt;离开和进入页面时改变 title&lt;/h2&gt;&lt;p&gt;利用 Page Visibility，该规范定义了一种用于站点开发人员以编程方式确定页面的当前可见性状态以便开发功率和 CPU 高效的 Web 应用程序的手段。&lt;/p&gt;</summary>
    
    
    
    
    <category term="JS" scheme="http://shiyiya.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS 中的深 &amp; 浅拷贝</title>
    <link href="http://shiyiya.github.io/archives/js-shallow-copy-and-deep-copy/"/>
    <id>http://shiyiya.github.io/archives/js-shallow-copy-and-deep-copy/</id>
    <published>2018-06-29T16:00:00.000Z</published>
    <updated>2023-09-09T04:42:02.052Z</updated>
    
    
    <summary type="html">&lt;h2&gt;浅复制和深复制的区别？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;浅复制（shallow copy）：只复制指向某个对象的指针，而不复制对象本身，新旧对象 u 共享一块内存；&lt;/li&gt;
&lt;li&gt;深复制（deep copy）：复制并创建一个一摸一样的对象，不共享内存，修改新对象，旧对象保持不变。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;即最大的区别在于，复制过程中的值是否为引用传值。&lt;/p&gt;</summary>
    
    
    
    
    <category term="JS" scheme="http://shiyiya.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>react redux introduction</title>
    <link href="http://shiyiya.github.io/archives/react-redux-introduction/"/>
    <id>http://shiyiya.github.io/archives/react-redux-introduction/</id>
    <published>2018-05-21T16:00:00.000Z</published>
    <updated>2023-09-09T04:42:02.052Z</updated>
    
    
    <summary type="html">&lt;p&gt;Redux 是 JavaScript 状态容器，提供可预测化的状态管理。&lt;br&gt;React-Redux 用于连接 React、Redux。&lt;/p&gt;</summary>
    
    
    
    
    <category term="react-redux" scheme="http://shiyiya.github.io/tags/react-redux/"/>
    
  </entry>
  
  <entry>
    <title>hello webpack with react</title>
    <link href="http://shiyiya.github.io/archives/how-to-set-correctly-font-family/"/>
    <id>http://shiyiya.github.io/archives/how-to-set-correctly-font-family/</id>
    <published>2018-01-26T16:00:00.000Z</published>
    <updated>2023-09-09T04:42:02.052Z</updated>
    
    
    <summary type="html">&lt;p&gt;虽然 React 官方有提供一个 create-react-app 的脚手架，并给出了各种在开发过程中需要的扩展配置文档：比如如果你想用 sass，它会教你怎么做，不知道如何部署，它也告诉你了；甚至还告诉你如何用 prettier 去 lint 代码；但本着折腾的精神，也来小小实现一番。&lt;/p&gt;</summary>
    
    
    
    
    <category term="react" scheme="http://shiyiya.github.io/tags/react/"/>
    
    <category term="webpack" scheme="http://shiyiya.github.io/tags/webpack/"/>
    
  </entry>
  
</feed>
